#include <xmotion.h>
#include <NewPing.h>
#include <Servo.h>

#define SONAR_NUM 3      // Number of sensors. 
#define MAX_DISTANCE 200 // Maximum distance (in cm) to ping.

int pos = 0;

int QTI[] = {0, A2, A4};
int QTIvalue[] = {0, 0, 0};
int spd = 30; // 0-100

int lineThreshhold = 200;

int lastDirection = 0; // 0 = straight  1 = left   2 = right


//this is to deal with getting stuck on a left turn occasionaly
long timeSince010;
long timeSince011;
int flag = 0;

//debug
String space = " ";

NewPing sonar[SONAR_NUM] = {   // Sensor object array.
  NewPing(4, 4, MAX_DISTANCE), // Each sensor's trigger pin, echo pin, and max distance to ping. 
  NewPing(2, 2, MAX_DISTANCE), 
  NewPing(1, 1, MAX_DISTANCE)
};

Servo servo;


void setup() {
   Serial.begin(9600);
   servo.attach(A1);
}



void loop() {
  //long timeElapsed = millis();
//  Serial.print(QTIvalue[0]);
//  Serial.print(QTIvalue[1]);
//  Serial.println(QTIvalue[2]);
  //Serial.println(digitalRead(0));
  LineCheck();
  Movement(QTIvalue[0],QTIvalue[1],QTIvalue[2]);
//    xmotion.ArcTurn(0,50,550);
//    xmotion.ArcTurn(0,-100,10);
//    xmotion.StopMotors(5000);
  Serial.print(QTIvalue[0]);
  Serial.print(QTIvalue[1]);
  Serial.println(QTIvalue[2]);

}

void LineCheck(){ // 0 = white    1 = black
  for (int i = 1; i < 3; i++){ 
    if ((analogRead(QTI[i])) <= lineThreshhold){
      QTIvalue[i] = 0;
      //Serial.print(analogRead(QTI[i]));
    } else {
      QTIvalue[i] = 1;
    }
    QTIvalue[0] = digitalRead(0);
    //Serial.print(i);
  }
}


void Movement(int ls, int ms, int rs){
  if ((ls == 0) && (ms == 1) && (rs == 0)){
    xmotion.Left0(spd,20);xmotion.Right0(100,10);
//    timeSince010 = millis();
//    if (timeSince010 - timeSince011 >= 100){
//      flag++;
//      lastDirection = 1;
//    } 
//    if (flag >= 5){
//      //xmotion.Left0(spd,120);
//      xmotion.ArcTurn(0,spd,350);
//      flag = 0;
//    }
  }
  else if ((ls == 0) && (ms == 0) && (rs == 0)){
    xmotion.Right0(spd,20);xmotion.Left0(100,10);
    xmotion.StopMotors(30);
    BrokenLine();
    lastDirection = 0;
  }
  else if ((ls == 1) && (ms == 0) && (rs == 0)){
    xmotion.Left0(spd,30);
  }
  else if ((ls == 0) && (ms == 0) && (rs == 1)){
    xmotion.Right0(spd,30);
  }
  else if ((ls == 1) && (ms == 1) && (rs == 0)){
    LeftTurn();
    //xmotion.Forward(spd,10);
    lastDirection = 1;
  }
   if ((ls == 0) && (ms == 1) && (rs == 1)){
    RightTurn();
//    xmotion.Right0(spd,100);
//    xmotion.Forward(spd,10);
    lastDirection = 2;
    timeSince011 = millis();
//    if (timeSince011 - timeSince010 >= 100){
//      flag++;
//      lastDirection = 1;
//    }
//    if (flag >= 5){
//      //xmotion.Left0(spd,140);
//      xmotion.ArcTurn(0,spd,350);
//      flag = 0;
//    }
  }
  else if ((ls == 1) && (ms == 1) && (rs == 1)){
    if (lastDirection == 1){
      xmotion.Left0(spd,80);
    }
    else if (lastDirection == 2){
      xmotion.Right0(spd,80);
    }
  }
  //Serial.println(ls + space + ms + space + rs);
}

void BrokenLine(){
  LineCheck();
  if ((QTIvalue[0] == 0) && (QTIvalue[1] == 0) && (QTIvalue[2] == 0)){
    xmotion.Forward(spd,20);
    Serial.println("000");
    BrokenLine();
  }
}

void LeftTurn(){
  xmotion.StopMotors(200);
  xmotion.ArcTurn(0,50,450);xmotion.ArcTurn(0,-100,10);
}

void RightTurn(){
  xmotion.StopMotors(200);
  xmotion.ArcTurn(50,0,450);xmotion.ArcTurn(0,-100,10);
}

void ServoMove(){
    for (pos = 0; pos <= 70; pos++) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
     servo.write(pos);              // tell servo to go to position 'pos'
    delay(15);                       // waits 15ms for the servo to get there
  }
  for (pos = 70; pos >= 0; pos--) { // goes from 180 degrees to 0 degrees
    servo.write(pos);
    delay(15);
  }
}
